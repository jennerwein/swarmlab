########################################################################
#     Import variables from the configuration file
########################################################################
configFile='./config.yml'
# In Ruby this module is needed to serialize a Yaml string
require 'yaml'
getVar = YAML.load_file(configFile) 
# Variables
NUMBER_OF_MANAGERS=getVar['NUMBER_OF_MANAGERS']
NUMBER_OF_WORKERS=getVar['NUMBER_OF_WORKERS']
MEMORY_MANAGER=getVar['MEMORY_MANAGER']
NUMBER_CPUS_MANAGER=getVar['NUMBER_CPUS_MANAGER']
MEMORY_WORKER=getVar['MEMORY_WORKER']
NUMBER_CPUS_WORKER=getVar['NUMBER_CPUS_WORKER']
VAGRANTFILE_API_VERSION = getVar['VAGRANTFILE_API_VERSION']
UPDATE_MACHINES = getVar['UPDATE_MACHINES']

########################################################################
#                     Provisioning function
########################################################################
def provision(node, ipaddress, nodetype, hostname)
  # Install Docker
  node.vm.provision :shell, :path => "provision/install-docker.sh"
  # Manager provisioning
  if nodetype === "manager"
    node.vm.provider "virtualbox" do |v|
      # Memory
      v.memory = MEMORY_MANAGER
      # Number of CPU if (UPDATE_MACHINES)
      v.cpus = NUMBER_CPUS_MANAGER
    end
    # Initialise swarm and add managers to the created swarm
    node.vm.provision :shell, :path => "provision/manager.sh", :args => [ ipaddress, hostname ]
  # Worker provisioning
  elsif nodetype === "worker"
    node.vm.provider "virtualbox" do |v|
      # Memory
      v.memory = MEMORY_WORKER
      # Number of CPU if (UPDATE_MACHINES)
      v.cpus = NUMBER_CPUS_WORKER
    end  
    # Add workers to the created swarm
    node.vm.provision :shell, :path => "provision/worker.sh"
  end  
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = getVar['VM_BOX']
  # Enable/Disable search for updates
  config.vm.box_check_update = false
  config.vm.provider 'virtualbox' do |v|
     # Linked clone is supported from version 1.8.0.
    # For more informations refer to the the following link:
    # https://www.vagrantup.com/docs/providers/virtualbox/configuration.html#linked-clones
    v.linked_clone = true if Gem::Version.new(Vagrant::VERSION) >= Gem::Version.new('1.8.0')
  end
  
  ########################################################################
  #       Create the first manager, the principal Manager where Swarm 
  #     will be initialized and add other managers: Manager 2, Manager 3 ...    
  ########################################################################
  (1..NUMBER_OF_MANAGERS).each do |mgrNumber|
    _MANAGER_NAME = "manager#{mgrNumber}"
    config.vm.define _MANAGER_NAME do |node|
      # Define the hostname
      node.vm.hostname = _MANAGER_NAME
      node.vm.network "private_network", ip: "192.168.50.#{99+mgrNumber}"
      provision(node, "192.168.50.#{99+mgrNumber}", "manager", _MANAGER_NAME)
    end
  end 
  ########################################################################
  #  Create Worker machines: worker1, worker2, worker3 ...
  ########################################################################
  (1..NUMBER_OF_WORKERS).each do |workerNumber|
    _WORKER_NAME = "worker#{workerNumber}"
    config.vm.define _WORKER_NAME do |node|
      # Define the hostname
      node.vm.hostname = _WORKER_NAME
      node.vm.network "private_network", ip: "192.168.50.#{149+workerNumber}"
      provision(node, "192.168.50.#{149+workerNumber}", "worker", _WORKER_NAME)
    end
  end
end